{
   "mappings": [
      {
         "name": "systemAMAccounts_managedUser",
         "source": "system/AM/account",
         "target": "managed/user",
         "correlationQuery": {
            "type": "text/javascript",
            "expressionTree": {
               "any": [
                  "mail"
               ]
            },
            "mapping": "systemAMAccounts_managedUser",
            "file": "ui/correlateTreeToQueryFilter.js"
         },
         "properties": [
            {
               "source": "cn",
               "target": "displayName"
            },
            {
               "source": "description",
               "target": "description"
            },
            {
               "source": "givenName",
               "target": "givenName"
            },
            {
               "source": "mail",
               "target": "mail"
            },
            {
               "source": "telephoneNumber",
               "target": "telephoneNumber",
               "condition": {
                  "type": "text/javascript",
                  "source": "object.telephoneNumber != null"
               }
            },
            {
               "source": "sn",
               "target": "sn"
            },
            {
               "source": "uid",
               "target": "userName"
            },
            {
               "source": "kbaInfo",
               "target": "kbaInfo",
               "transform": {
                  "type": "groovy",
                  "source": "source ? source.collect{(new groovy.json.JsonSlurper()).parseText(it)} : []"
               }
            },
            {
               "target": "type",
               "source": "employeeType",
               "condition": {
                  "type": "text/javascript",
                  "globals": {},
                  "source": "object.employeeType != null"
               }
            }
         ],
         "policies": [
            {
               "situation": "CONFIRMED",
               "action": "UPDATE"
            },
            {
               "situation": "FOUND",
               "action": "UPDATE"
            },
            {
               "situation": "ABSENT",
               "action": "CREATE"
            },
            {
               "situation": "AMBIGUOUS",
               "action": "EXCEPTION"
            },
            {
               "situation": "MISSING",
               "action": "CREATE"
            },
            {
               "situation": "SOURCE_MISSING",
               "action": "DELETE"
            },
            {
               "situation": "UNQUALIFIED",
               "action": "IGNORE"
            },
            {
               "situation": "UNASSIGNED",
               "action": "IGNORE"
            },
            {
               "situation": "FOUND_ALREADY_LINKED",
               "action": "ASYNC"
            },
            {
               "situation": "LINK_ONLY",
               "action": "ASYNC"
            },
            {
               "situation": "TARGET_IGNORED",
               "action": "ASYNC"
            },
            {
               "situation": "SOURCE_IGNORED",
               "action": "ASYNC"
            },
            {
               "situation": "ALL_GONE",
               "action": "ASYNC"
            }
         ]
      },
      {
         "name": "managedUser_systemAMAccounts",
         "source": "managed/user",
         "target": "system/AM/account",
         "links": "systemAMAccounts_managedUser",
         "onCreate": {
            "type": "groovy",
            "globals": {},
            "source": "target.frdpOATHsecret = '93887c90b61dae38c0ad472421e0d86196c841ee'; \ntarget.dn = 'uid=' + source.userName + ',ou=people,dc=mytestrun,dc=com';"
         },
         "properties": [
            {
               "source": "givenName",
               "target": "givenName"
            },
            {
               "source": "sn",
               "target": "sn"
            },
            {
               "source": "",
               "transform": {
                  "type": "text/javascript",
                  "source": "source.displayName || (source.givenName + ' ' + source.sn);"
               },
               "target": "cn"
            },
            {
               "source": "userName",
               "target": "uid"
            },
            {
               "source": "description",
               "target": "description",
               "condition": {
                  "type": "text/javascript",
                  "source": "!!object.description"
               }
            },
            {
               "source": "mail",
               "target": "mail"
            },
            {
               "source": "password",
               "condition": {
                  "type": "text/javascript",
                  "source": "object.password != null"
               },
               "transform": {
                  "type": "text/javascript",
                  "source": "openidm.decrypt(source);"
               },
               "target": "userPassword"
            },
            {
               "source": "telephoneNumber",
               "target": "telephoneNumber",
               "condition": {
                  "type": "text/javascript",
                  "source": "!!object.telephoneNumber"
               }
            },
            {
               "target": "aliasList",
               "condition": "/object/idpData pr",
               "transform": {
                  "type": "text/javascript",
                  "globals": {},
                  "source": "Object\n .keys(source)\n .filter(function (provider) { return source[provider].enabled !== false; })\n .map(function (provider) { return provider + '-' + source[provider].subject; })"
               },
               "source": "idpData"
            },
            {
               "target": "objectClass",
               "default": [
                  "top",
                  "inetuser",
                  "person",
                  "inetOrgPerson",
                  "organizationalPerson",
                  "iplanet-am-user-service",
                  "kbaInfoContainer",
                  "devicePrintProfilesContainer",
                  "pushDeviceProfilesContainer",
                  "sunFMSAML2NameIdentifier",
                  "sunAMAuthAccountLockout",
                  "iplanet-am-auth-configuration-service",
                  "iplanet-am-managed-person",
                  "iPlanetPreferences",
                  "oathDeviceProfilesContainer",
                  "sunFederationManagerDataStore",
                  "sunIdentityServerLibertyPPService",
                  "webauthnDeviceProfilesContainer",
                  "forgerock-am-dashboard-service",
                  "frdppasswdvault",
                  "frdpoathuser",
                  "frdpmfa"
               ]
            },
            {
               "source": "verified",
               "target": "frdpverified",
               "condition": {
                  "type": "text/javascript",
                  "source": "!!object.verified"
               }
            },
            {
               "source": "accountStatus",
               "target": "ldapStatus",
               "transform": {
                  "type": "text/javascript",
                  "globals": {},
                  "source": "source === 'active' ? 'Active' : 'Inactive';"
               }
            },
            {
               "target": "employeeType",
               "source": "type",
               "condition": {
                  "type": "text/javascript",
                  "globals": {},
                  "source": "!!object.type"
               }
            },
            {
               "target": "frdpemailpasswd",
               "transform": {
                  "type": "groovy",
                  "globals": {},
                  "source": "import javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.Cipher;\n\nclass Crypter {\n  def expandKey (def secret) {\n    for (def i=0; i<4; i++) {\n      secret += secret\n    }\n    return secret.substring(0, 16)\n  }\n  \n  def encrypt (def plainText, def secret) {\n    secret = expandKey(secret)\n    def cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"SunJCE\")\n                                    SecretKeySpec key = new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"AES\")\n    cipher.init(Cipher.ENCRYPT_MODE, key)\n    return cipher.doFinal(plainText.getBytes(\"UTF-8\")).encodeBase64().toString()\n  }\n}\n\ndef c = new Crypter()\ndef clearText = openidm.decrypt(source.password)\ndef secret = 'VGhpc0lzQVNlY3JldEtleQ=='\nbyte[] decoded = secret.decodeBase64()\nsecret = new String(decoded,\"UTF-8\")\n\nc.encrypt(clearText, secret)"
               },
               "source": ""
            }
         ],
         "policies": [
            {
               "situation": "CONFIRMED",
               "action": "UPDATE"
            },
            {
               "situation": "FOUND",
               "action": "LINK"
            },
            {
               "situation": "ABSENT",
               "action": "CREATE"
            },
            {
               "situation": "AMBIGUOUS",
               "action": "IGNORE"
            },
            {
               "situation": "MISSING",
               "action": "CREATE"
            },
            {
               "situation": "SOURCE_MISSING",
               "action": "DELETE"
            },
            {
               "situation": "UNQUALIFIED",
               "action": "IGNORE"
            },
            {
               "situation": "UNASSIGNED",
               "action": "IGNORE"
            },
            {
               "situation": "TARGET_IGNORED",
               "action": "IGNORE"
            },
            {
               "situation": "ALL_GONE",
               "action": "IGNORE"
            },
            {
               "situation": "FOUND_ALREADY_LINKED",
               "action": "EXCEPTION"
            },
            {
               "situation": "LINK_ONLY",
               "action": "EXCEPTION"
            },
            {
               "situation": "SOURCE_IGNORED",
               "action": "IGNORE"
            }
         ]
      }
   ]
}
